{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/init(servicename:sessiontype:peername:encryptionpreference:delegate:)","title":"init(serviceName: String, sessionType: SessionType, peerName: String?, encryptionPreference: MCEncryptionPreference, delegate: MultipeerHelperDelegate?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/connectedpeers","title":"var connectedPeers: [MCPeerID]","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/delegate","title":"var delegate: MultipeerHelperDelegate?","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/mypeerid","title":"var myPeerID: MCPeerID","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/serviceadvertiser","title":"var serviceAdvertiser: MCNearbyServiceAdvertiser?","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/servicebrowser","title":"var serviceBrowser: MCNearbyServiceBrowser?","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/servicename","title":"let serviceName: String","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session","title":"var session: MCSession!","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.property","title":"let sessionType: SessionType","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/syncservice","title":"var syncService: MultipeerConnectivityService?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/disconnectall()","title":"func disconnectAll()","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/findpeer(name:)","title":"func findPeer(name: String) -> MCPeerID?","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sendtoallpeers(_:reliably:)","title":"func sendToAllPeers(Data, reliably: Bool) -> Bool","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sendtopeer(named:data:reliably:)","title":"func sendToPeer(named: String, data: Data, reliably: Bool) -> Bool","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sendtopeers(_:reliably:peers:)","title":"func sendToPeers(Data, reliably: Bool, peers: [MCPeerID]) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/comptokenkey","title":"static let compTokenKey: String","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/osversionkey","title":"static let osVersionKey: String","type":"property"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/platformkey","title":"static let platformKey: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/both","title":"case both","type":"case"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/host","title":"case host","type":"case"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/peer","title":"case peer","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/sessiontype-swift.enum","title":"MultipeerHelper.SessionType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/advertiser(_:didreceiveinvitationfrompeer:withcontext:invitationhandler:)","title":"func advertiser(MCNearbyServiceAdvertiser, didReceiveInvitationFromPeer: MCPeerID, withContext: Data?, invitationHandler: (Bool, MCSession?) -> Void)","type":"method"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/mcnearbyserviceadvertiserdelegate-implementations","title":"MCNearbyServiceAdvertiserDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/browser(_:foundpeer:withdiscoveryinfo:)","title":"func browser(MCNearbyServiceBrowser, foundPeer: MCPeerID, withDiscoveryInfo: [String : String]?)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/browser(_:lostpeer:)","title":"func browser(MCNearbyServiceBrowser, lostPeer: MCPeerID)","type":"method"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/mcnearbyservicebrowserdelegate-implementations","title":"MCNearbyServiceBrowserDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:didfinishreceivingresourcewithname:frompeer:at:witherror:)","title":"func session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: Error?)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:didreceive:frompeer:)","title":"func session(MCSession, didReceive: Data, fromPeer: MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:didreceive:withname:frompeer:)","title":"func session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:didreceivecertificate:frompeer:certificatehandler:)","title":"func session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:didstartreceivingresourcewithname:frompeer:with:)","title":"func session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelper\/session(_:peer:didchange:)","title":"func session(MCSession, peer: MCPeerID, didChange: MCSessionState)","type":"method"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper\/mcsessiondelegate-implementations","title":"MCSessionDelegate Implementations","type":"symbol"}],"path":"\/documentation\/multipeerhelper\/multipeerhelper","title":"MultipeerHelper","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/peerjoined(peerhelper:_:)","title":"func peerJoined(peerHelper: MultipeerHelper, MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/peerleft(peerhelper:_:)","title":"func peerLeft(peerHelper: MultipeerHelper, MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/peerlost(peerhelper:_:)","title":"func peerLost(peerHelper: MultipeerHelper, MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/receivedcertificate(peerhelper:certificate:frompeer:)","title":"func receivedCertificate(peerHelper: MultipeerHelper, certificate: [Any]?, fromPeer: MCPeerID) -> Bool","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/receiveddata(peerhelper:_:_:)","title":"func receivedData(peerHelper: MultipeerHelper, Data, MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/receivedresource(peerhelper:_:_:_:_:)","title":"func receivedResource(peerHelper: MultipeerHelper, String, MCPeerID, URL?, Error?)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/receivedstream(peerhelper:_:_:_:)","title":"func receivedStream(peerHelper: MultipeerHelper, InputStream, String, MCPeerID)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/receivingresource(peerhelper:_:_:_:)","title":"func receivingResource(peerHelper: MultipeerHelper, String, MCPeerID, Progress)","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/setdiscoveryinfo()","title":"func setDiscoveryInfo() -> [String : String]","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/shouldacceptjoinrequest(peerhelper:peerid:context:)","title":"func shouldAcceptJoinRequest(peerHelper: MultipeerHelper, peerID: MCPeerID, context: Data?) -> Bool","type":"method"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/shouldsendjoinrequest(peerhelper:_:with:)","title":"func shouldSendJoinRequest(peerHelper: MultipeerHelper, MCPeerID, with: [String : String]?) -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate\/checkpeertoken(with:)","title":"static func checkPeerToken(with: [String : String]?) -> Bool","type":"method"}],"path":"\/documentation\/multipeerhelper\/multipeerhelperdelegate","title":"MultipeerHelperDelegate","type":"protocol"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/mhelpererrors\/failure","title":"case failure","type":"case"},{"path":"\/documentation\/multipeerhelper\/mhelpererrors\/timedout","title":"case timedOut","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/mhelpererrors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/multipeerhelper\/mhelpererrors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipeerhelper\/mhelpererrors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/multipeerhelper\/mhelpererrors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/multipeerhelper\/mhelpererrors","title":"MHelperErrors","type":"enum"}],"path":"\/documentation\/multipeerhelper","title":"MultipeerHelper","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}